CU = unique(SR_data$CUID),
x = rep("48",13),
y = rep(50, 13),
model = rep("Individual",13)
)
dat_text
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
geom_text(data = dat_text, mapping = aes(x= x, y = y, label = label, fill = model), size = 2.5)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
geom_label(data = dat_text, aes(label=label, fill = model),
x = Inf, y = -Inf, hjust=1, vjust=0)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
geom_label(data = dat_text, aes(label=label, fill = model),
x = Inf, y = -Inf, hjust=1, vjust=0)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
geom_label(data = dat_text, aes(label=label, fill = model),
x = Inf, y = -Inf, hjust=1, vjust=0,inherit.aes = FALSE))
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
geom_label(data = dat_text, aes(label=label, fill = model),
x = Inf, y = -Inf, hjust=1, vjust=0,inherit.aes = FALSE)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0)
dat_text
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
geom_label(data = dat_text, aes(label=label), x = Inf, y = -Inf, hjust=1, vjust=0)
dat_text.simp <- data.frame(label = round(exp(alphas.hier),digits=2),
CU = unique(SR_data$CUID))
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
geom_label(data = dat_text.simp, aes(label=label), x = Inf, y = -Inf, hjust=1, vjust=0)
Smsy_estimates.df.long$CU_w_alpha <- NA
Smsy_estimates.hier.df.long$CU_w_alpha <- NA
smax.hier
alphas.hier
unique(Smsy_estimates.all.df.long.short$CU
)
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w, alphas.hier[CU_index], sep=" ") }
Smsy_estimates.all.df.long.short
Smsy_estimates.all.df.long.short$CU_w_alpha <- NA
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w, alphas.hier[CU_index], sep=" ") }
Smsy_estimates.all.df.long.short
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w,"(prod. = " exp(round(alphas.hier[CU_index],digits=2)),")", sep=" ") }
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w,"(prod. = ", exp(round(alphas.hier[CU_index],digits=2)),")", sep=" ") }
Smsy_estimates.all.df.long.short
alphas.hier <- round(fixef(model.hier)[[1]]+ranef(model.hier)$CUID[,1],digits=2)
alphas.hier
alphas.hier <- exp(round(fixef(model.hier)[[1]]+ranef(model.hier)$CUID[,1],digits=2))
alphas.hier
alphas.hier <- round(exp(fixef(model.hier)[[1]]+ranef(model.hier)$CUID[,1]),digits=2)
alphas.hier
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w,"(prod. = ", alphas.hier,")", sep=" ") }
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w,"(prod. = ", alphas.hier[CU_index],")", sep=" ") }
Smsy_estimates.all.df.long.short
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w,"(prod.=", alphas.hier[CU_index],")", sep=" ") }
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0)
fixef(model.hier)
exp(1.595674e+00)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ")
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_colour_viridis_d()
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, color = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_colour_viridis_d()
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d()
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d(alpha = 0.5)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d(alpha = 0.5,"City\nCenter")
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d(alpha = 0.5,"Spawner-recruit\nmodel")
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_bw() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d(alpha = 0.5,"Spawner-recruit\nmodel")
ggsave("Lake_sockeye.pdf")
remotes::install_github("seananderson/ggsidekick")
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_sleek() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d(alpha = 0.5,"Spawner-recruit\nmodel")
library(ggsidekick)
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_sleek() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d(alpha = 0.5,"Spawner-recruit\nmodel")
ggsave("Lake_sockeye2.pdf")
raw_brood_table <- read.csv("dataset_5.April082019.csv")
## clean up brood table, drop brood years with missing data
brood_table <- raw_brood_table %>%
select(CUID, Species,Year, Spawners, Recruits) %>%
drop_na(Recruits, Spawners)
## how many spawner-recruitment points are there per CU?
brood_table %>%
group_by(CUID,Species) %>%
summarise(c = n()) %>%
as.data.frame()
brood_table %>%
group_by(CUID,Species) %>%
tally() %>%
as.data.frame()
## load required packages and functions
library(tidyverse)
library(gsl)
library(lme4)
library(plyr)
library(ggsidekick)
## load Skeena PSE spawner-recruitment data
raw_brood_table <- read.csv("dataset_5.April082019.csv")
## clean up brood table, drop brood years with missing data
brood_table <- raw_brood_table %>%
select(CUID, Species,Year, Spawners, Recruits) %>%
drop_na(Recruits, Spawners)
## how many spawner-recruitment points are there per CU and species?
brood_table %>%
group_by(CUID,Species) %>%
tally() %>%
as.data.frame()
## Lets go with Lake sockeye to start
SR_data <- subset(brood_table, Species == "Lake Sockeye")
## loop through a range of spawner-recruit data points and estimate Smsy, 1000 times for each level of SR pair, for both individual and hierarchical models
no_sims <- 1000
no_cus <- length(unique(SR_data$CUID))
Smsy_estimates_ind <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_ind <- no_cus
Smsy_estimates_hier <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_hier <- med_smsy_ind
for(k in unique(SR_data$CUID)){
CU_data <- subset(SR_data, CUID == k)
max_data_points <- length(CU_data$Year)
CU_index <- which(unique(SR_data$CUID)==k)
for(i in 3:max_data_points){
for(j in 1:no_sims){
Smsy_estimates_ind[j,i,CU_index] <- get_smsy(CU_data,i)
Smsy_estimates_hier[j,i,CU_index] <- get_smsy_hier(SR_data,i,k)
}
}
med_smsy_ind[CU_index] <- median(Smsy_estimates_ind[j,max_data_points,CU_index])
med_smsy_hier[CU_index] <- median(Smsy_estimates_hier[j,max_data_points,CU_index])
}
## a couple of simple functions to fit linearized Ricker models to a specified number of SR data points and estimate Smsy
# single CU
get_smsy <- function(data, no_SR_pairs){
data <- data[sample(length(data$Year),no_SR_pairs),]
model <- lm(log(data$Recruits/data$Spawners)~data$Spawners)
Smsy <- (1-lambert_W0(exp(1-model$coefficients[1]))) / abs(model$coefficients[2])
return(Smsy)
}
# all CUS - i.e., hierarchical
get_smsy_hier <- function(data, no_SR_pairs, CU){
CU_data <- subset(data, CUID == CU)
CU_index <- which(unique(data$CUID)==k)
other_CU_data <- subset(data, CUID != CU)
CU_data <- CU_data[sample(length(CU_data$Year),no_SR_pairs),]
data <- rbind(CU_data,other_CU_data)
data$CUID<-as.character(data$CUID)
model <- lmer(log(Recruits/Spawners)~Spawners:CUID + (1|CUID), data = data)
alpha <- fixef(model)[[1]]+ranef(model)$CUID[CU_index,1]
beta <- fixef(model)[[CU_index+1]]
Smsy <- (1-lambert_W0(exp(1-alpha))) / abs(beta)
return(Smsy)
}
## loop through a range of spawner-recruit data points and estimate Smsy, 1000 times for each level of SR pair, for both individual and hierarchical models
no_sims <- 1000
no_cus <- length(unique(SR_data$CUID))
Smsy_estimates_ind <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_ind <- no_cus
Smsy_estimates_hier <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_hier <- med_smsy_ind
for(k in unique(SR_data$CUID)){
CU_data <- subset(SR_data, CUID == k)
max_data_points <- length(CU_data$Year)
CU_index <- which(unique(SR_data$CUID)==k)
for(i in 3:max_data_points){
for(j in 1:no_sims){
Smsy_estimates_ind[j,i,CU_index] <- get_smsy(CU_data,i)
Smsy_estimates_hier[j,i,CU_index] <- get_smsy_hier(SR_data,i,k)
}
}
med_smsy_ind[CU_index] <- median(Smsy_estimates_ind[j,max_data_points,CU_index])
med_smsy_hier[CU_index] <- median(Smsy_estimates_hier[j,max_data_points,CU_index])
}
Smsy_estimates.df.long <- adply(Smsy_estimates_ind,c(1,2,3))
colnames(Smsy_estimates.df.long) <- c("rep","data_points","CU","Smsy")
Smsy_estimates.df.long$data_points <- as.numeric(Smsy_estimates.df.long$data_points)
Smsy_estimates.df.long <- subset(Smsy_estimates.df.long,data_points>2)
Smsy_estimates.df.long$model <- "Individual"
Smsy_estimates.df.long$bias <- NA
Smsy_estimates.hier.df.long <- adply(Smsy_estimates_hier,c(1,2,3))
colnames(Smsy_estimates.hier.df.long) <- c("rep","data_points","CU","Smsy")
Smsy_estimates.hier.df.long$data_points <- as.numeric(Smsy_estimates.hier.df.long$data_points)
Smsy_estimates.hier.df.long <- subset(Smsy_estimates.hier.df.long,data_points>2)
Smsy_estimates.hier.df.long$model <- "Hierarchical"
Smsy_estimates.hier.df.long$bias <- NA
#Smsy_estimates.all.df.long <- rbind(Smsy_estimates.df.long, Smsy_estimates.hier.df.long)
#Smsy_estimates.all.df.long$model <- as.factor(Smsy_estimates.all.df.long$model)
true_smsy_ind <- cbind(unique(SR_data$CUID),med_smsy_ind); as.numeric(true_smsy_ind[,2])
true_smsy_hier <- cbind(unique(SR_data$CUID),med_smsy_hier)
for(w in unique(SR_data$CUID)){
Smsy_estimates.df.long[Smsy_estimates.df.long$CU==w,]$bias<-(((Smsy_estimates.df.long[Smsy_estimates.df.long$CU==w,]$Smsy)/as.numeric(true_smsy_ind[true_smsy_ind[,1]==w,2]))-1)*100
Smsy_estimates.hier.df.long[Smsy_estimates.hier.df.long$CU==w,]$bias<-(((Smsy_estimates.hier.df.long[Smsy_estimates.hier.df.long$CU==w,]$Smsy)/as.numeric(true_smsy_hier[true_smsy_hier[,1]==w,2]))-1)*100
}
Smsy_estimates.all.df.long <- rbind(Smsy_estimates.df.long, Smsy_estimates.hier.df.long)
write.csv(Smsy_estimates.all.df.long, file="Smsy_estimates.all.df.long.csv")
## Lets go with Lake sockeye to start
SR_data <- subset(brood_table, Species == "Chinook")
## loop through a range of spawner-recruit data points and estimate Smsy, 1000 times for each level of SR pair, for both individual and hierarchical models
no_sims <- 1000
no_cus <- length(unique(SR_data$CUID))
Smsy_estimates_ind <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_ind <- no_cus
Smsy_estimates_hier <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_hier <- med_smsy_ind
for(k in unique(SR_data$CUID)){
CU_data <- subset(SR_data, CUID == k)
max_data_points <- length(CU_data$Year)
CU_index <- which(unique(SR_data$CUID)==k)
for(i in 3:max_data_points){
for(j in 1:no_sims){
Smsy_estimates_ind[j,i,CU_index] <- get_smsy(CU_data,i)
Smsy_estimates_hier[j,i,CU_index] <- get_smsy_hier(SR_data,i,k)
}
}
med_smsy_ind[CU_index] <- median(Smsy_estimates_ind[j,max_data_points,CU_index])
med_smsy_hier[CU_index] <- median(Smsy_estimates_hier[j,max_data_points,CU_index])
}
SR_data
## loop through a range of spawner-recruit data points and estimate Smsy, 1000 times for each level of SR pair, for both individual and hierarchical models
no_sims <- 1000
no_cus <- length(unique(SR_data$CUID))
Smsy_estimates_ind <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_ind <- no_cus
Smsy_estimates_hier <- array(NA,dim=c(no_sims,48,no_cus),dimnames=list(seq(1:no_sims),seq(1:48),as.character(unique(SR_data$CUID))))
med_smsy_hier <- med_smsy_ind
for(k in unique(SR_data$CUID)){
CU_data <- subset(SR_data, CUID == k)
max_data_points <- length(CU_data$Year)
CU_index <- which(unique(SR_data$CUID)==k)
for(i in 3:max_data_points){
for(j in 1:no_sims){
Smsy_estimates_ind[j,i,CU_index] <- get_smsy(CU_data,i)
Smsy_estimates_hier[j,i,CU_index] <- get_smsy_hier(SR_data,i,k)
}
}
med_smsy_ind[CU_index] <- median(Smsy_estimates_ind[j,max_data_points,CU_index])
med_smsy_hier[CU_index] <- median(Smsy_estimates_hier[j,max_data_points,CU_index])
}
Smsy_estimates.df.long <- adply(Smsy_estimates_ind,c(1,2,3))
colnames(Smsy_estimates.df.long) <- c("rep","data_points","CU","Smsy")
Smsy_estimates.df.long$data_points <- as.numeric(Smsy_estimates.df.long$data_points)
Smsy_estimates.df.long <- subset(Smsy_estimates.df.long,data_points>2)
Smsy_estimates.df.long$model <- "Individual"
Smsy_estimates.df.long$bias <- NA
Smsy_estimates.hier.df.long <- adply(Smsy_estimates_hier,c(1,2,3))
colnames(Smsy_estimates.hier.df.long) <- c("rep","data_points","CU","Smsy")
Smsy_estimates.hier.df.long$data_points <- as.numeric(Smsy_estimates.hier.df.long$data_points)
Smsy_estimates.hier.df.long <- subset(Smsy_estimates.hier.df.long,data_points>2)
Smsy_estimates.hier.df.long$model <- "Hierarchical"
Smsy_estimates.hier.df.long$bias <- NA
#Smsy_estimates.all.df.long <- rbind(Smsy_estimates.df.long, Smsy_estimates.hier.df.long)
#Smsy_estimates.all.df.long$model <- as.factor(Smsy_estimates.all.df.long$model)
true_smsy_ind <- cbind(unique(SR_data$CUID),med_smsy_ind); as.numeric(true_smsy_ind[,2])
true_smsy_hier <- cbind(unique(SR_data$CUID),med_smsy_hier)
for(w in unique(SR_data$CUID)){
Smsy_estimates.df.long[Smsy_estimates.df.long$CU==w,]$bias<-(((Smsy_estimates.df.long[Smsy_estimates.df.long$CU==w,]$Smsy)/as.numeric(true_smsy_ind[true_smsy_ind[,1]==w,2]))-1)*100
Smsy_estimates.hier.df.long[Smsy_estimates.hier.df.long$CU==w,]$bias<-(((Smsy_estimates.hier.df.long[Smsy_estimates.hier.df.long$CU==w,]$Smsy)/as.numeric(true_smsy_hier[true_smsy_hier[,1]==w,2]))-1)*100
}
Smsy_estimates.all.df.long <- rbind(Smsy_estimates.df.long, Smsy_estimates.hier.df.long)
write.csv(Smsy_estimates.all.df.long, file="CH_Smsy_estimates.all.df.long.csv")
Smsy_estimates.all.df.long.short <- subset(Smsy_estimates.all.df.long, data_points == c(3,8,13,18,23,28,33,38,43,48))
#### Estimate alpha and Smax by CU (individual and hierarchical models)
alphas.ind <- med_smsy_ind
smax.ind <- alphas.ind
for(k in unique(SR_data$CUID)){
CU_data <- subset(SR_data, CUID == k)
CU_index <- which(unique(SR_data$CUID)==k)
model <- lm(log(CU_data$Recruits/CU_data$Spawners)~CU_data$Spawners)
alphas.ind[CU_index] <- model$coefficients[1]
smax.ind[CU_index] <- 1/abs(model$coefficients[2])
}
SR_data$CUID<-as.character(SR_data$CUID)
model.hier <- lmer(log(Recruits/Spawners)~Spawners:CUID + (1|CUID), data = SR_data)
alphas.hier <- round(exp(fixef(model.hier)[[1]]+ranef(model.hier)$CUID[,1]),digits=2)
smax.hier <- round(1/(abs(fixef(model.hier)[2:14])))
Smsy_estimates.all.df.long.short$CU_w_alpha <- NA
for(w in unique(Smsy_estimates.all.df.long.short$CU)){
CU_index <- which(unique(Smsy_estimates.all.df.long.short$CU)==w)
Smsy_estimates.all.df.long.short[Smsy_estimates.all.df.long.short$CU==w,]$CU_w_alpha <- paste(w,"(prod.=", alphas.hier[CU_index],")", sep=" ") }
#### plots
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_sleek() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Lake sockeye (prod.=4.94) ") +
scale_fill_viridis_d(alpha = 0.5,"Spawner-recruit\nmodel")
#ggsave("Lake_sockeye2.pdf")
ggsave("Chinook.pdf")
fixef(model.hier)
exp(1.837764e+00 )
alphas.hier
ranef(model.hier)
model.hier <- lmer(log(Recruits/Spawners)~Spawners:CUID + (1|CUID), data = SR_data)
#### plots
p <- ggplot(Smsy_estimates.all.df.long.short, aes(x= cut_width(data_points,1), y = bias, fill = model))
p + geom_boxplot(position = "dodge2", outlier.size = -1 ) +
facet_wrap(~ CU_w_alpha)+
scale_x_discrete(labels=c("3", "8", "13", "18", "23", "28", "32", "38", "43", "48")) +
coord_cartesian(ylim=c(-100,100))+
labs(x = "Number of spawner-recruit data points",
y = "Bias in Smsy") +
theme_sleek() +
theme(axis.text = element_text(size=6)) +
geom_hline(yintercept = 0) +
ggtitle("Chinook (prod.=6.28) ") +
scale_fill_viridis_d(alpha = 0.5,"Spawner-recruit\nmodel")
#ggsave("Lake_sockeye2.pdf")
ggsave("Chinook.pdf")
#ggsave("Lake_sockeye2.pdf")
ggsave("Chinook.pdf")
#### Estimate alpha and Smax by CU (individual and hierarchical models)
alphas.ind <- matrix(NA,1,length(unique((SR_data$CUID))))
